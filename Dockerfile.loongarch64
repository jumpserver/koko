FROM lcr.loongnix.cn/library/redis:7.4.5-trixie AS redis-stage
FROM lcr.loongnix.cn/library/golang:1.24-trixie AS stage-go-build

FROM lcr.loongnix.cn/library/node:20.19-trixie-slim
COPY --from=stage-go-build /usr/local/go/ /usr/local/go/
COPY --from=stage-go-build /go/ /go/
COPY --from=redis-stage /usr/local/bin/redis-cli /usr/local/bin/redis-cli
ENV GOPATH=/go
ENV PATH=/go/bin:/usr/local/go/bin:$PATH
ARG TARGETARCH
ARG NPM_REGISTRY="https://registry.npmmirror.com"
ENV NPM_REGISTRY=$NPM_REGISTRY

RUN set -ex \
    && npm config set registry ${NPM_REGISTRY} \
    && yarn config set registry ${NPM_REGISTRY}

WORKDIR /opt

ARG HELM_VERSION=v3.16.1
ARG KUBECTL_VERSION=v1.31.3
ARG CHECK_VERSION=v1.0.4
ARG USQL_VERSION=v0.0.6

# RUN set -ex \
#     && mkdir -p /opt/koko/bin \
#     && wget -O kubectl.tar.gz https://dl.k8s.io/${KUBECTL_VERSION}/kubernetes-client-linux-${TARGETARCH}.tar.gz \
#     && tar -xf kubectl.tar.gz --strip-components=3 -C /opt/koko/bin/ kubernetes/client/bin/kubectl \
#     && mv /opt/koko/bin/kubectl /opt/koko/bin/rawkubectl \
#     && wget https://get.helm.sh/helm-${HELM_VERSION}-linux-${TARGETARCH}.tar.gz \
#     && tar -xf helm-${HELM_VERSION}-linux-${TARGETARCH}.tar.gz --strip-components=1 -C /opt/koko/bin/ linux-${TARGETARCH}/helm \
#     && mv /opt/koko/bin/helm /opt/koko/bin/rawhelm \
#     && wget https://github.com/jumpserver-dev/healthcheck/releases/download/${CHECK_VERSION}/check-${CHECK_VERSION}-linux-${TARGETARCH}.tar.gz \
#     && tar -xf check-${CHECK_VERSION}-linux-${TARGETARCH}.tar.gz -C /opt/koko/bin/ check \
#     && wget https://github.com/jumpserver-dev/usql/releases/download/${USQL_VERSION}/usql-${USQL_VERSION}-linux-${TARGETARCH}.tar.gz \
#     && tar -xf usql-${USQL_VERSION}-linux-${TARGETARCH}.tar.gz -C /opt/koko/bin/ \
#     && wget -O /opt/koko/.kubectl_aliases https://github.com/ahmetb/kubectl-aliases/raw/master/.kubectl_aliases \
#     && chmod 755 /opt/koko/bin/* \
#     && chown root:root /opt/koko/bin/* \
#     && rm -f *.tar.gz

WORKDIR /opt/koko

ARG MONGOSH_VERSION=2.3.4
# RUN set -ex \
#     && mkdir -p /opt/koko/lib \
#     && \
#     case "${TARGETARCH}" in \
#         amd64) \
#             wget https://downloads.mongodb.com/compass/mongosh-${MONGOSH_VERSION}-linux-x64.tgz \
#             && tar -xf mongosh-${MONGOSH_VERSION}-linux-x64.tgz \
#             && chown root:root mongosh-${MONGOSH_VERSION}-linux-x64/bin/* \
#             && mv mongosh-${MONGOSH_VERSION}-linux-x64/bin/mongosh /opt/koko/bin/ \
#             && mv mongosh-${MONGOSH_VERSION}-linux-x64/bin/mongosh_crypt_v1.so /opt/koko/lib/ \
#             && rm -rf mongosh-${MONGOSH_VERSION}-linux-x64* \
#             ;; \
#         arm64|ppc64le|s390x) \
#             wget https://downloads.mongodb.com/compass/mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}.tgz \
#             && tar -xf mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}.tgz \
#             && chown root:root mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}/bin/* \
#             && mv mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}/bin/mongosh /opt/koko/bin/ \
#             && mv mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}/bin/mongosh_crypt_v1.so /opt/koko/lib/ \
#             && rm -rf mongosh-${MONGOSH_VERSION}-linux-${TARGETARCH}* \
#             ;; \
#         *) \
#             echo "Unsupported architecture: ${TARGETARCH}" \
#             ;; \
#     esac

COPY ./ui/package.json /opt/koko/ui/package.json
COPY ./ui/yarn.lock /opt/koko/ui/yarn.lock

WORKDIR /opt/koko/ui

RUN yarn install

WORKDIR /opt/koko/

ENV CGO_ENABLED=0
ENV GO111MODULE=on
ENV GOPROXY=https://goproxy.cn,direct

COPY go.mod go.sum ./

RUN apt-get install debian-ports-archive-keyring \
    && apt-get install -y ca-certificates \
    && go mod download -x


ARG VERSION
ENV VERSION=$VERSION

COPY . /opt/koko/
WORKDIR /opt/koko/ui
RUN yarn build

WORKDIR /opt/koko
RUN make build -s \
    && set -x && ls -al . \
    && mv /opt/koko/build/koko /opt/koko/koko \
    && echo "koko build success"
    # && mv /opt/koko/bin/rawhelm /opt/koko/bin/helm \
    # && mv /opt/koko/bin/rawkubectl /opt/koko/bin/kubectl

RUN mkdir /opt/koko/release \
    && mv /opt/koko/locale /opt/koko/release \
    && mv /opt/koko/config_example.yml /opt/koko/release \
    && mv /opt/koko/entrypoint.sh /opt/koko/release \
    && mv /opt/koko/utils/init-kubectl.sh /opt/koko/release \
    && chmod 755 /opt/koko/release/entrypoint.sh /opt/koko/release/init-kubectl.sh


FROM lcr.loongnix.cn/library/debian:trixie-slim  AS stage-build
ARG TARGETARCH
ENV LANG=en_US.UTF-8

LABEL org.opencontainers.image.source=https://github.com/jumpserver/koko
LABEL org.opencontainers.image.description="JumpServer Koko"


ARG DEPENDENCIES="                    \
        bash-completion               \
        jq                            \
        less                          \
        ca-certificates"

ARG APT_MIRROR=http://deb.debian.org

RUN set -ex \
    && sed -i "s@http://.*.debian.org@${APT_MIRROR}@g" /etc/apt/sources.list \
    && ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \
    && apt-get update \
    && apt-get install -y --no-install-recommends ${DEPENDENCIES} \
    && apt-get clean all \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /opt/koko

# COPY --from=stage-build /usr/local/bin/redis-cli /usr/local/bin/redis-cli
# COPY --from=stage-build /opt/koko/.kubectl_aliases /opt/kubectl-aliases/.kubectl_aliases
COPY --from=stage-build /opt/koko/bin /usr/local/bin
COPY --from=stage-build /opt/koko/lib /usr/local/lib
COPY --from=stage-build /opt/koko/release .
COPY --from=stage-build /opt/koko/koko .

ARG VERSION
ENV VERSION=${VERSION}

VOLUME /opt/koko/data

ENTRYPOINT ["./entrypoint.sh"]

EXPOSE 2222

STOPSIGNAL SIGQUIT

CMD [ "./koko" ]
